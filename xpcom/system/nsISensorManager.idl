/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozilla.org code.
 *
 * The Initial Developer of the Original Code is Mozilla Foundation.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Sinker Li <tlee@mozilla.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"
#include "nsIArray.idl"

interface nsIDOMWindow;

[scriptable, uuid(433DFC21-02A3-11E1-83A1-002215D227B8)]
interface nsISensorValue : nsISupports
{
  readonly attribute float value;
};

[scriptable, uuid(2EAB18FF-0230-11E1-83A1-002215D227B8)]
interface nsISensorData : nsISupports
{
  const short SENSOR_ORIENTATION = 0;
  const short SENSOR_ACCELERATION = 1;
  const short SENSOR_PROXIMITY = 2;
  
  readonly attribute unsigned long sensor;
  readonly attribute unsigned long long timestamp;
  readonly attribute nsIArray values;
};

[scriptable, uuid(605CF47D-0032-11E1-83A1-002215D227B8)]
interface nsISensorListener : nsISupports
{
  void onSensorChange(in nsISensorData aData);
};

[scriptable, uuid(6283CD1A-0039-11E1-83A1-002215D227B8)]
interface nsISensorManager : nsISupports
{
  void addListener(in unsigned long aSensorType,
		   in nsISensorListener aListener);
  void removeListener(in unsigned long aSensorType,
		      in nsISensorListener aListener);
};

